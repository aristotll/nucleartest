// Code generated by protoc-gen-_go. DO NOT EDIT.
// versions:
// 	protoc-gen-_go v1.25.0
// 	protoc        v3.11.4
// source: spike.proto

// option go_package = "services";

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SpikeOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpikeOrder []*SpikeUserOrder `protobuf:"bytes,1,rep,name=spikeOrder,proto3" json:"spikeOrder,omitempty"`
}

func (x *SpikeOrderRequest) Reset() {
	*x = SpikeOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spike_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpikeOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpikeOrderRequest) ProtoMessage() {}

func (x *SpikeOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spike_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpikeOrderRequest.ProtoReflect.Descriptor instead.
func (*SpikeOrderRequest) Descriptor() ([]byte, []int) {
	return file_spike_proto_rawDescGZIP(), []int{0}
}

func (x *SpikeOrderRequest) GetSpikeOrder() []*SpikeUserOrder {
	if x != nil {
		return x.SpikeOrder
	}
	return nil
}

type SpikeOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []string `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *SpikeOrderResponse) Reset() {
	*x = SpikeOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spike_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpikeOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpikeOrderResponse) ProtoMessage() {}

func (x *SpikeOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spike_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpikeOrderResponse.ProtoReflect.Descriptor instead.
func (*SpikeOrderResponse) Descriptor() ([]byte, []int) {
	return file_spike_proto_rawDescGZIP(), []int{1}
}

func (x *SpikeOrderResponse) GetMessages() []string {
	if x != nil {
		return x.Messages
	}
	return nil
}

var File_spike_proto protoreflect.FileDescriptor

var file_spike_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70,
	0x62, 0x1a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x47, 0x0a, 0x11, 0x53, 0x70, 0x69, 0x6b, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x70,
	0x69, 0x6b, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0a, 0x73, 0x70,
	0x69, 0x6b, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x30, 0x0a, 0x12, 0x53, 0x70, 0x69, 0x6b,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x32, 0x55, 0x0a, 0x11, 0x53, 0x70,
	0x69, 0x6b, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x40, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x15,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x69, 0x6b, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x69, 0x6b, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30,
	0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spike_proto_rawDescOnce sync.Once
	file_spike_proto_rawDescData = file_spike_proto_rawDesc
)

func file_spike_proto_rawDescGZIP() []byte {
	file_spike_proto_rawDescOnce.Do(func() {
		file_spike_proto_rawDescData = protoimpl.X.CompressGZIP(file_spike_proto_rawDescData)
	})
	return file_spike_proto_rawDescData
}

var file_spike_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_spike_proto_goTypes = []interface{}{
	(*SpikeOrderRequest)(nil),  // 0: pb.SpikeOrderRequest
	(*SpikeOrderResponse)(nil), // 1: pb.SpikeOrderResponse
	(*SpikeUserOrder)(nil),     // 2: pb.SpikeUserOrder
}
var file_spike_proto_depIdxs = []int32{
	2, // 0: pb.SpikeOrderRequest.spikeOrder:type_name -> pb.SpikeUserOrder
	0, // 1: pb.SpikeOrderService.SubmitOrder:input_type -> pb.SpikeOrderRequest
	1, // 2: pb.SpikeOrderService.SubmitOrder:output_type -> pb.SpikeOrderResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_spike_proto_init() }
func file_spike_proto_init() {
	if File_spike_proto != nil {
		return
	}
	file_models_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_spike_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpikeOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spike_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpikeOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spike_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spike_proto_goTypes,
		DependencyIndexes: file_spike_proto_depIdxs,
		MessageInfos:      file_spike_proto_msgTypes,
	}.Build()
	File_spike_proto = out.File
	file_spike_proto_rawDesc = nil
	file_spike_proto_goTypes = nil
	file_spike_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SpikeOrderServiceClient is the client API for SpikeOrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SpikeOrderServiceClient interface {
	SubmitOrder(ctx context.Context, opts ...grpc.CallOption) (SpikeOrderService_SubmitOrderClient, error)
}

type spikeOrderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpikeOrderServiceClient(cc grpc.ClientConnInterface) SpikeOrderServiceClient {
	return &spikeOrderServiceClient{cc}
}

func (c *spikeOrderServiceClient) SubmitOrder(ctx context.Context, opts ...grpc.CallOption) (SpikeOrderService_SubmitOrderClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SpikeOrderService_serviceDesc.Streams[0], "/pb.SpikeOrderService/SubmitOrder", opts...)
	if err != nil {
		return nil, err
	}
	x := &spikeOrderServiceSubmitOrderClient{stream}
	return x, nil
}

type SpikeOrderService_SubmitOrderClient interface {
	Send(*SpikeOrderRequest) error
	Recv() (*SpikeOrderResponse, error)
	grpc.ClientStream
}

type spikeOrderServiceSubmitOrderClient struct {
	grpc.ClientStream
}

func (x *spikeOrderServiceSubmitOrderClient) Send(m *SpikeOrderRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *spikeOrderServiceSubmitOrderClient) Recv() (*SpikeOrderResponse, error) {
	m := new(SpikeOrderResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SpikeOrderServiceServer is the server API for SpikeOrderService service.
type SpikeOrderServiceServer interface {
	SubmitOrder(SpikeOrderService_SubmitOrderServer) error
}

// UnimplementedSpikeOrderServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSpikeOrderServiceServer struct {
}

func (*UnimplementedSpikeOrderServiceServer) SubmitOrder(SpikeOrderService_SubmitOrderServer) error {
	return status.Errorf(codes.Unimplemented, "method SubmitOrder not implemented")
}

func RegisterSpikeOrderServiceServer(s *grpc.Server, srv SpikeOrderServiceServer) {
	s.RegisterService(&_SpikeOrderService_serviceDesc, srv)
}

func _SpikeOrderService_SubmitOrder_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SpikeOrderServiceServer).SubmitOrder(&spikeOrderServiceSubmitOrderServer{stream})
}

type SpikeOrderService_SubmitOrderServer interface {
	Send(*SpikeOrderResponse) error
	Recv() (*SpikeOrderRequest, error)
	grpc.ServerStream
}

type spikeOrderServiceSubmitOrderServer struct {
	grpc.ServerStream
}

func (x *spikeOrderServiceSubmitOrderServer) Send(m *SpikeOrderResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *spikeOrderServiceSubmitOrderServer) Recv() (*SpikeOrderRequest, error) {
	m := new(SpikeOrderRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SpikeOrderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SpikeOrderService",
	HandlerType: (*SpikeOrderServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubmitOrder",
			Handler:       _SpikeOrderService_SubmitOrder_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "spike.proto",
}
